<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2017 Les Hazlewood and the respective Juiser contributors
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

    <modelVersion>4.0.0</modelVersion>

    <groupId>org.juiser.examples</groupId>
    <artifactId>juiser-spring-origin-example</artifactId>
    <version>0.1.0-SNAPSHOT</version>
    <name>Juiser Spring Origin Example</name>
    <description>A juiser-enabled backend origin server that can automatically read an X-Forwarded-User header with a
        user JWT, validate the JWT, extract the user information, and represent that data in a user object.

        This example needs a gateway server to set such a header in the forwarded request - one such gateway example is
        https://github.com/stormpath/stormpath-spring-zuul-gateway-example
    </description>
    <packaging>jar</packaging>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.5.3.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <bouncycastle.version>1.56</bouncycastle.version>
        <juiser.version>0.1.0-SNAPSHOT</juiser.version>
    </properties>

    <dependencies>
        <dependency>
            <!-- To handle the X-Forwarded-User header: -->
            <groupId>org.juiser</groupId>
            <artifactId>juiser-spring-boot-starter</artifactId>
            <version>${juiser.version}</version>
        </dependency>
        <dependency>
            <!-- So juiser can read *.pem public key files to verify the signature of the JWT in the
                 X-Forwarded-User header: -->
            <groupId>org.bouncycastle</groupId>
            <artifactId>bcpkix-jdk15on</artifactId>
            <version>${bouncycastle.version}</version>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-config</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-web</artifactId>
        </dependency>
        <dependency>
            <!-- For the welcome.html Thymeleaf template: -->
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>
        <dependency>
            <!-- For MVC controllers: -->
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
        </dependency>
        <dependency>
            <!-- We use SLF4, but some dependencies use commons-logging: -->
            <groupId>org.slf4j</groupId>
            <artifactId>jcl-over-slf4j</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <!-- Logging implementation: -->
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <scope>runtime</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>
